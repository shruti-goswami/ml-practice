# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N7DUUj7eZ-BeYlwnrY8ycTRPb24NQeus

This notebook predicts the student scores based on the number of hours studied. The source of the dataset is from kaggle : https://www.kaggle.com/datasets/samira1992/student-scores-simple-dataset/data

The implementation is from scratch and then the same is compared with sklearn library's prediction.
"""

## Import required modules
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

## Load dataset
df = pd.read_csv('HousingData.csv')
df.describe()
# X = np.array(df['YearsExperience'])
# y = np.array(df['Salary'])

##Calculate correlation matrix
corr_matrix = df.corr()

# Correlation of features with target (MEDV)
target_corr = corr_matrix["MEDV"].sort_values(ascending=False)

#Plot correlation heatmap for all features
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(12,8))
sns.heatmap(corr_matrix,annot = True,cmap = "coolwarm",fmt=".2f")
plt.title("Feature correlation matrix with MEDV")
plt.show()

## Plotting correlation with target
plt.figure(figsize=(8, 6))
target_corr.drop("MEDV").plot(kind="barh", color="teal")
plt.xlabel("Correlation with MEDV")
plt.title("Feature Correlation with Target (MEDV)")
plt.show()

# Positive correlation example
sns.scatterplot(x=df["RM"], y=df["MEDV"])
plt.title("Rooms vs House Price (MEDV)")
plt.show()

# Negative correlation example
sns.scatterplot(x=df["LSTAT"], y=df["MEDV"])
plt.title("LSTAT vs House Price (MEDV)")
plt.show()

"""Based on the correlation of features with target column (MEDV), the desired features will be
1. RM
2. LSTAT
3. PTRATIO
4. CRIM
5. TAX
6. INDUS
"""

X = df[['RM','LSTAT','PTRATIO','CRIM','TAX','INDUS']]
y = df['MEDV']

## Check if there is null in desired features
X.isnull().sum()

## Check for Unique values
X['CRIM'].unique()
# for col in X.columns:
#   print(col,X[col].unique())

## Handle null values
X['LSTAT'] = X['LSTAT'].fillna(X['LSTAT'].mean())
X['CRIM'] = X['CRIM'].fillna(X['CRIM'].median())
X['INDUS'] = X['INDUS'].fillna(X['INDUS'].median())

## Split dataset and train model
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.1,random_state=42)

model = LinearRegression()
model.fit(X_train,y_train)
y_predicted = model.predict(X_test)
mse = mean_squared_error(y_test,y_predicted)
score = model.score(X_test,y_test)
print("MSE : ",mse)
print("Score : ", score)

